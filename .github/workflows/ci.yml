name: Test/Build (main)
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.filter.outputs.go }}
      charts: ${{ steps.filter.outputs.charts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'

  test:
    runs-on: ubuntu-latest
    needs: changes
    if: |
      (needs.changes.outputs.go == 'true')

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod

      - name: Install go dependencies
        run: go mod download

      - name: Run go vet
        run: go vet -v ./...

      - name: Run go tests
        run: go test -v -cover -race ./...

  build:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: |
      (needs.changes.outputs.go == 'true')
    strategy:
      matrix:
        include:
          - os: linux
            arch: 386
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: freebsd
            arch: 386
          - os: freebsd
            arch: amd64
          - os: windows
            arch: 386
            extension: ".exe"
          - os: windows
            arch: amd64
            extension: ".exe"
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod

      - name: Download go dependencies
        run: go mod download

      - name: Create release (${{ matrix.os }}-${{ matrix.arch }})
        run: CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -a -ldflags '-s -w' -o adguard_exporter-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.extension }} ./

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DH_USER }}
          password: ${{ secrets.DH_PASSWORD }}
      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build controller image
        if: steps.changed-files-plantcontroller.outputs.any_changed == 'true'
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.context }}
          tags: ${{ env.image_name_controller }}
          platforms: linux/arm,linux/arm64,linux/amd64
          push: true
        env:
          context: ./controller
      - name: Build the Docker image
        run: |
          currImage="rockclimber81/adguard-exporter:dev"
          latestImage="rockclimber81/cni-plugins"
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm --build-arg version=${{ vars.version }} -t $currImage --push .
          docker logout